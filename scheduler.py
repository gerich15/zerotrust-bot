import asyncio
import logging
import random
from datetime import datetime
from ai_generator import AIContentGenerator
from news_generator import NewsGenerator  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç


class PostScheduler:
    def __init__(self, bot, channel_id):
        self.bot = bot
        self.channel_id = channel_id
        self.is_running = False

    async def create_and_send_post(self):
        try:
            logging.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")

            # –ß–µ—Ä–µ–¥—É–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏ (50/50)
            if random.random() > 0.5:
                # –û–±—ã—á–Ω—ã–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç
                post_text = AIContentGenerator.generate_post_text()
                image_prompt = AIContentGenerator.generate_image_prompt(post_text)
            else:
                # –ù–æ–≤–æ—Å—Ç–Ω–æ–π –ø–æ—Å—Ç
                post_text = NewsGenerator.generate_cybersecurity_news()
                image_prompt = "cybersecurity news, digital newspaper, breaking news about hackers, futuristic news background"

            image_url = AIContentGenerator.generate_image(image_prompt)

            await self.bot.send_photo(
                chat_id=self.channel_id, photo=image_url, caption=post_text
            )

            logging.info(f"‚úÖ –ü–æ—Å—Ç –æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {datetime.now()}")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def start_scheduler(self, interval_hours=6):
        self.is_running = True
        logging.info(
            f"üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_hours} —á–∞—Å–æ–≤"
        )

        while self.is_running:
            await self.create_and_send_post()
            await asyncio.sleep(interval_hours * 3600)

    def stop_scheduler(self):
        self.is_running = False
